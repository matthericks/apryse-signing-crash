// This file is autogenerated: please see the codegen template "Options"
namespace pdftron{ namespace PDF{ 

inline SVGConvertOptions::SVGConvertOptions()
	: m_obj_set()
	, m_dict()
{
	m_dict = m_obj_set.CreateDict();
}

inline SVGConvertOptions::~SVGConvertOptions()
{
}


inline bool SVGConvertOptions::GetConvertLinks()
{
	SDF::Obj found = m_dict.FindObj("ConvertLinks");
	if(found.IsValid())
	{
		return (found.GetBool());
	}
	return (true);
}

inline SVGConvertOptions& SVGConvertOptions::SetConvertLinks(bool value)
{
	PDF::OptionsBase::PutBool(m_dict, "ConvertLinks", (value));
	return *this;
}


inline UString SVGConvertOptions::GetDefaultFontFamily()
{
	SDF::Obj found = m_dict.FindObj("DefaultFontFamily");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("");
}

inline SVGConvertOptions& SVGConvertOptions::SetDefaultFontFamily(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "DefaultFontFamily", (value));
	return *this;
}


inline UString SVGConvertOptions::GetFallbackFontFamily()
{
	SDF::Obj found = m_dict.FindObj("FallbackFontFamily");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("");
}

inline SVGConvertOptions& SVGConvertOptions::SetFallbackFontFamily(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "FallbackFontFamily", (value));
	return *this;
}


inline double SVGConvertOptions::GetFallbackHeight()
{
	SDF::Obj found = m_dict.FindObj("FallbackHeight");
	if(found.IsValid())
	{
		return (found.GetNumber());
	}
	return (0);
}

inline SVGConvertOptions& SVGConvertOptions::SetFallbackHeight(double value)
{
	PDF::OptionsBase::PutNumber(m_dict, "FallbackHeight", (value));
	return *this;
}


inline double SVGConvertOptions::GetFallbackWidth()
{
	SDF::Obj found = m_dict.FindObj("FallbackWidth");
	if(found.IsValid())
	{
		return (found.GetNumber());
	}
	return (0);
}

inline SVGConvertOptions& SVGConvertOptions::SetFallbackWidth(double value)
{
	PDF::OptionsBase::PutNumber(m_dict, "FallbackWidth", (value));
	return *this;
}


inline bool SVGConvertOptions::GetForceSRGB()
{
	SDF::Obj found = m_dict.FindObj("ForceSRGB");
	if(found.IsValid())
	{
		return (found.GetBool());
	}
	return (false);
}

inline SVGConvertOptions& SVGConvertOptions::SetForceSRGB(bool value)
{
	PDF::OptionsBase::PutBool(m_dict, "ForceSRGB", (value));
	return *this;
}


inline double SVGConvertOptions::GetForcedHeight()
{
	SDF::Obj found = m_dict.FindObj("ForcedHeight");
	if(found.IsValid())
	{
		return (found.GetNumber());
	}
	return (0);
}

inline SVGConvertOptions& SVGConvertOptions::SetForcedHeight(double value)
{
	PDF::OptionsBase::PutNumber(m_dict, "ForcedHeight", (value));
	return *this;
}


inline double SVGConvertOptions::GetForcedWidth()
{
	SDF::Obj found = m_dict.FindObj("ForcedWidth");
	if(found.IsValid())
	{
		return (found.GetNumber());
	}
	return (0);
}

inline SVGConvertOptions& SVGConvertOptions::SetForcedWidth(double value)
{
	PDF::OptionsBase::PutNumber(m_dict, "ForcedWidth", (value));
	return *this;
}


inline bool SVGConvertOptions::GetHonorIccProfile()
{
	SDF::Obj found = m_dict.FindObj("HonorIccProfile");
	if(found.IsValid())
	{
		return (found.GetBool());
	}
	return (true);
}

inline SVGConvertOptions& SVGConvertOptions::SetHonorIccProfile(bool value)
{
	PDF::OptionsBase::PutBool(m_dict, "HonorIccProfile", (value));
	return *this;
}


inline bool SVGConvertOptions::GetInline()
{
	SDF::Obj found = m_dict.FindObj("Inline");
	if(found.IsValid())
	{
		return (found.GetBool());
	}
	return (true);
}

inline SVGConvertOptions& SVGConvertOptions::SetInline(bool value)
{
	PDF::OptionsBase::PutBool(m_dict, "Inline", (value));
	return *this;
}


inline UString SVGConvertOptions::GetLang()
{
	SDF::Obj found = m_dict.FindObj("Lang");
	if(found.IsValid())
	{
		return (found.GetAsPDFText());
	}
	return ("");
}

inline SVGConvertOptions& SVGConvertOptions::SetLang(const UString& value)
{
	PDF::OptionsBase::PutText(m_dict, "Lang", (value));
	return *this;
}



inline const SDF::Obj& SVGConvertOptions::GetInternalObj() const
{
	return m_dict;
}

inline SDF::Obj& SVGConvertOptions::GetInternalObj()
{
	return m_dict;
}

}
}
